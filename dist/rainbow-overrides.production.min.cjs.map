{"version":3,"file":"rainbow-overrides.production.min.cjs","sources":["../src/compile.ts","../src/write.ts"],"sourcesContent":["import glob from 'glob'\nimport { promises as fs } from 'fs'\nimport defaultOverrides from './data/default-overrides.json';\n\nexport type OverrideToken = {\n  color?: string;\n  isCurated?: boolean;\n  isVerified?: boolean;\n  name?: string;\n  symbol?: string;\n  shadowColor?: string;\n};\n\nexport const getOverrides = async () => {\n  const overrides: { [address: string]: OverrideToken } = {};\n  const overrideFiles = glob.sync('tokens/**/*.json');\n\n  for (const overrideFile of overrideFiles) {\n    const rawOverride = JSON.parse(\n      await fs.readFile(overrideFile, 'utf-8')\n    );\n    /**\n     * Each override is indexed by its address, i.e.: \n     *\n     * { '0x123...': { color: ... }, ... }\n     */\n    const { address, ...overrideData } = rawOverride;\n    overrides[address] = overrideData;\n  }\n\n  return {\n    ...defaultOverrides,\n    ...overrides,\n  };\n}\n\nexport { defaultOverrides };","import { promises as fs } from 'fs';\nimport { getOverrides } from './compile.js';\n\nexport const write = async () => {\n  const overrides = await getOverrides();\n  const serialized = JSON.stringify(overrides, null, 2);\n  /**\n   * Copy to src/output for exporting.\n   */\n  await fs.writeFile(\n    'src/data/rainbow-overrides.json',\n    serialized\n  );\n};\n"],"names":["getOverrides","async","overrides","overrideFiles","glob","sync","overrideFile","rawOverride","JSON","parse","fs","readFile","address","overrideData","defaultOverrides","serialized","stringify","writeFile"],"mappings":"y2cAaaA,EAAeC,UAC1B,MAAMC,EAAkD,GAClDC,EAAgBC,UAAKC,KAAK,oBAEhC,IAAK,MAAMC,KAAgBH,EAAe,CACxC,MAAMI,EAAcC,KAAKC,YACjBC,WAAGC,SAASL,EAAc,WAO5BM,QAAEA,KAAYC,GAAiBN,EACrCL,EAAUU,GAAWC,EAGvB,MAAO,IACFC,KACAZ,gzcC7BcD,UACnB,MAAMC,QAAkBF,IAClBe,EAAaP,KAAKQ,UAAUd,EAAW,KAAM,SAI7CQ,WAAGO,UACP,kCACAF"}